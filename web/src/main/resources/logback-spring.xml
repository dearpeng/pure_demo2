<?xml version="1.0" encoding="UTF-8"?>
<configuration scan="true" scanPeriod="60 seconds" debug="false">


    <!--设置公用的属性-->
    <property name="filePath" value="D:/files/logs/web"/>
    <property name="infoLevel" value="info"/>
    <property name="errorLevel" value="error"/>
    <property name="debugLevel" value="debug"/>


    <!--打印到控制台,输出目的地-->
    <appender name="console" class="ch.qos.logback.core.ConsoleAppender">
        <!--控制台输出格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{32}.%M:%L %msg%n</pattern>
            <immediateFlush>false</immediateFlush>
        </encoder>
    </appender>


    <!--info日志输出到info日志文件-->
    <appender name="file_info" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，
   所以我们使用下面的策略，可以避免输出 Error 的日志,info日志输出到info日志数据-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <!--过滤 info-->
            <level>${infoLevel}</level>
            <!--匹配到就加入到info日志-->
            <onMatch>ACCEPT</onMatch>
            <!--没有匹配到就不写入info日志-->
            <onMismatch>DENY</onMismatch>
        </filter>

        <!--如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter-->
        <!--<filter class="ch.qos.logback.classic.filter.ThresholdFilter">
            <level>Error</level>
        </filter>-->

        <!--输出的地址-->
        <file>${filePath}/log_info.log</file>
        <Append>true</Append>
        <!--设置日志不要都在一个文件的分隔策略-->
        <!--日志名称，如果没有File 属性，那么只会使用FileNamePattern的文件路径规则
            如果同时有<File>和<FileNamePattern>，那么当天日志是<File>，明天会自动把今天
            的日志改名为今天的日期。即，<File> 的日志都是当天的。
        -->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--这样写会压缩-->
            <fileNamePattern>D:/files/logs/server/bak/log_info.%d{yyyy-MM-dd}.log.zip</fileNamePattern>
            <!-- 保持历史15天的日志,否则删除旧日志 -->
            <maxHistory>15</maxHistory>
            <!--保存最大日志大小,否则删除旧日志-->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>
        <!--日志文件格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>utf-8</charset>
            <ImmediateFlush>true</ImmediateFlush>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{32}.%M:%L %msg%n</pattern>
        </encoder>
    </appender>


    <!--error级别的日志输出到error文件-->
    <appender name="file_error" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--ERROR日志放到error文件-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>${errorLevel}</level>
            <onMatch>ACCEPT</onMatch>
            <!--没有匹配到就不写入info日志-->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--文件地址和名称-->
        <file>${filePath}/log_error.log</file>

        <!--分开日志的策略,根据fileNamePattern中的yyyy-MM-dd这样来标识打包时间-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--这样写会压缩-->
            <fileNamePattern>D:/files/logs/server/bak/log_error.%d{yyyy-MM-dd}.log.zip</fileNamePattern>
            <!-- 保持历史15天的日志,否则删除旧日志 -->
            <maxHistory>15</maxHistory>
            <!--保存最大日志大小,否则删除旧日志-->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>

        <!--日志文件格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>utf-8</charset>
            <ImmediateFlush>true</ImmediateFlush>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{32}.%M:%L %msg%n</pattern>
        </encoder>
    </appender>



    <!--debug级别的日志输出到debug文件-->
    <appender name="file_debug" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <!--ERROR日志放到error文件-->
        <filter class="ch.qos.logback.classic.filter.LevelFilter">
            <level>${debugLevel}</level>
            <onMatch>ACCEPT</onMatch>
            <!--没有匹配到就不写入info日志-->
            <onMismatch>DENY</onMismatch>
        </filter>
        <!--文件地址和名称-->
        <file>${filePath}/log_debug.log</file>

        <!--分开日志的策略-->
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <!--这样写会压缩-->
            <fileNamePattern>D:/files/logs/server/bak/log_debug.%d{yyyy-MM-dd}.log.zip</fileNamePattern>
            <!-- 保持历史15天的日志,否则删除旧日志 -->
            <maxHistory>15</maxHistory>
            <!--保存最大日志大小,否则删除旧日志-->
            <totalSizeCap>1GB</totalSizeCap>
        </rollingPolicy>

        <!--日志文件格式-->
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <charset>utf-8</charset>
            <ImmediateFlush>true</ImmediateFlush>
            <pattern>%d{yyyy-MM-dd HH:mm:ss.SSS} %-5level %logger{32}.%M:%L %msg%n</pattern>
        </encoder>
    </appender>


    <!--日志根级别,这个要放在appender后面,不然会报找不到appender-->
    <root level="info">
        <!--引用哪个appender就会使用哪个日志输出策略,这边的会是全局通用策略-->
        <appender-ref ref="console"/>
        <appender-ref ref="file_info"/>
        <appender-ref ref="file_error"/>
        <appender-ref ref="file_debug"/>
        <!--<appender-ref ref="console"/>
        <appender-ref ref="file"/>-->
    </root>

    <!--不同环境使用不同的日志,开发,测试dev,test对应的是application-xxx.properties-->
    <springProfile name="dev,test">
        <!--
        <logger>用来设置某一个包或者具体的某一个类的日志打印级别、以及指定<appender>。<loger>仅有一个name属性，一个可选的level和一个可选的addtivity属性。
            name:用来指定受此loger约束的某一个包或者具体的某一个类。
            level:用来设置打印级别，大小写无关：TRACE, DEBUG, INFO, WARN, ERROR, ALL 和 OFF，还有一个特俗值INHERITED或者同义词NULL，代表强制执行上级的级别。如果未设置此属性，那么当前loger将会继承上级的级别。
            addtivity:是否向上级loger传递打印信息。默认是true。
        -->
        <logger name="com" level="debug" additivity="false">
            <!--logger 子节点 appender-ref 使用哪种日志输出策略-->
            <appender-ref ref="console"/>
            <appender-ref ref="file_info"/>
            <appender-ref ref="file_error"/>
            <appender-ref ref="file_debug"/>
        </logger>
    </springProfile>
    <!--生产环境-->
    <springProfile name="product">
        <logger name="com" level="info" additivity="true">
            <appender-ref ref="console"/>
            <appender-ref ref="file_info"/>
            <appender-ref ref="file_error"/>
            <appender-ref ref="file_debug"/>
        </logger>
    </springProfile>
</configuration>